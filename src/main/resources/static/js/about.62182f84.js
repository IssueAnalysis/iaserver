(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["about"],{f820:function(e,n,a){"use strict";a.r(n);var o=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"about"},[a("div",{directives:[{name:"highlight",rawName:"v-highlight"}],domProps:{innerHTML:e._s(e.txt)}})])},t=[],s={name:"About",data:function(){return{txt:'"I am using Hadoop-2.10.0.<pre><code>int main(){ print("hello world!");}</code></pre>\n<br><br>\nThe configuration parameter `dfs.namenode.audit.loggers` allows `default` (which is the default value) and `org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger`.\n\n\n\nWhen I use `org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger`, namenode will not be started successfully because of an `InstantiationException` thrown from `org.apache.hadoop.hdfs.server.namenode.FSNamesystem.initAuditLoggers`.åÊ\n\n\n\nThe root cause is that while initializing namenode, `initAuditLoggers` will be called and it will try to call the default constructor of `org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger` which doesn\'t have a default constructor. Thus the `InstantiationException` exception is thrown.\n\n\n\nåÊ\n\n\n\n*Symptom*\n\n\n\n*$ ./start-dfs.sh*\n\n{code:java}\n\n2019-12-18 14:05:20,670 ERROR org.apache.hadoop.hdfs.server.namenode.FSNamesystem: FSNamesystem initialization failed.java.lang.RuntimeException: java.lang.InstantiationException: org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger\n\nat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.initAuditLoggers(FSNamesystem.java:1024)\n\nat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.<init>(FSNamesystem.java:858)\n\nat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.loadFromDisk(FSNamesystem.java:677)\n\nat org.apache.hadoop.hdfs.server.namenode.NameNode.loadNamesystem(NameNode.java:674)\n\nat org.apache.hadoop.hdfs.server.namenode.NameNode.initialize(NameNode.java:736)\n\nat org.apache.hadoop.hdfs.server.namenode.NameNode.<init>(NameNode.java:961)\n\nat org.apache.hadoop.hdfs.server.namenode.NameNode.<init>(NameNode.java:940)\n\nat org.apache.hadoop.hdfs.server.namenode.NameNode.createNameNode(NameNode.java:1714)\n\nat org.apache.hadoop.hdfs.server.namenode.NameNode.main(NameNode.java:1782)\n\nCaused by: java.lang.InstantiationException: org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger\n\nat java.lang.Class.newInstance(Class.java:427)\n\nat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.initAuditLoggers(FSNamesystem.java:1017)...\n\n8 more\n\nCaused by: java.lang.NoSuchMethodException: org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger.<init>()\n\nat java.lang.Class.getConstructor0(Class.java:3082)\n\nat java.lang.Class.newInstance(Class.java:412)\n\n... 9 more{code}\n\nåÊ\n\n\n\nåÊ\n\n\n\n*Detailed Root Cause*\n\n\n\nThere is no default constructor in `org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger`:åÊ\n\n{code:java}\n\n/** \n\n * An {@link AuditLogger} that sends logged data directly to the metrics \n\n * systems. It is used when the top service is used directly by the name node \n\n */ \n\n@InterfaceAudience.Private \n\npublic class TopAuditLogger implements AuditLogger {     \n\n  public static finalLogger LOG = LoggerFactory.getLogger(TopAuditLogger.class); \n\n\n\n  private final TopMetrics topMetrics; \n\n\n\n  public TopAuditLogger(TopMetrics topMetrics) {\n\n    Preconditions.checkNotNull(topMetrics, "Cannot init with a null " + \n\n        "TopMetrics");\n\n    this.topMetrics = topMetrics; \n\n  }\n\n\n\n  @Override\n\n  public void initialize(Configuration conf) { \n\n  }\n\n{code}\n\nAs long as the configuration parameter `dfs.namenode.audit.loggers` is set to `org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger`, `initAuditLoggers` will try to call its default constructor to make a new instance:åÊ\n\n{code:java}\n\nprivate List<AuditLogger> initAuditLoggers(Configuration conf) {\n\nåÊ // Initialize the custom access loggers if configured.\n\nåÊ Collection<String> alClasses =\n\nåÊ åÊ åÊ conf.getTrimmedStringCollection(DFS_NAMENODE_AUDIT_LOGGERS_KEY);\n\nåÊ List<AuditLogger> auditLoggers = Lists.newArrayList();\n\nåÊ if (alClasses != null && !alClasses.isEmpty()) {\n\nåÊ åÊ for (String className : alClasses) {\n\nåÊ åÊ åÊ try {\n\nåÊ åÊ åÊ åÊ AuditLogger logger;\n\nåÊ åÊ åÊ åÊ if (DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME.equals(className)) {\n\nåÊ åÊ åÊ åÊ åÊ logger = new DefaultAuditLogger();\n\nåÊ åÊ åÊ åÊ } else {\n\nåÊ åÊ åÊ åÊ åÊ logger = (AuditLogger) Class.forName(className).newInstance();\n\nåÊ åÊ åÊ åÊ }\n\nåÊ åÊ åÊ åÊ logger.initialize(conf);\n\nåÊ åÊ åÊ åÊ auditLoggers.add(logger);\n\nåÊ åÊ åÊ } catch (RuntimeException re) {\n\nåÊ åÊ åÊ åÊ throw re;\n\nåÊ åÊ åÊ } catch (Exception e) {\n\nåÊ åÊ åÊ åÊ throw new RuntimeException(e);\n\nåÊ åÊ åÊ }\n\nåÊ åÊ }\n\nåÊ }\n\n{code}\n\n`initAuditLoggers` tries to call the default constructor to make a new instance in:\n\n{code:java}\n\nlogger = (AuditLogger) Class.forName(className).newInstance();\n\n{code}\n\nThis is very different from the default configuration, `default`, which implements a default constructor so the default is fine.\n\n\n\nåÊ\n\n\n\n*How To Reproduce*åÊ\n\n\n\nThe version of Hadoop: 2.10.0\n\n # Set the value of configuration parameter `dfs.namenode.audit.loggers` to `org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger` in "hdfs-site.xml"(the default value is `default`)\n\n # Start the namenode by running "start-dfs.sh"\n\n # The namenode will not be started successfully.\n\n\n\n{code:java}\n\n<property>\n\nåÊåÊ<name>dfs.namenode.audit.loggers</name>\n\nåÊåÊ<value>org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger</value>\n\nåÊåÊ<description>\n\nåÊåÊåÊåÊList of classes implementing audit loggers that will receive audit events.\n\nåÊåÊåÊåÊThese should be implementations of org.apache.hadoop.hdfs.server.namenode.AuditLogger.\n\nåÊåÊåÊåÊThe special value "default" can be used to reference the default audit\n\nåÊåÊåÊåÊlogger, which uses the configured log system. Installing custom audit loggers\n\nåÊåÊåÊåÊmay affect the performance and stability of the NameNode. Refer to the custom\n\nåÊåÊåÊåÊlogger\'s documentation for more details.\n\nåÊåÊ</description>\n\n</property>\n\n{code}\n\nåÊ\n\n\n\n*How To Fix*\n\n\n\nAdd a default constructor for `org.apache.hadoop.hdfs.server.namenode.top.TopAuditLogger`.\n\n\n\nI wrote a patch to add a default constructor foråÊTopAuditLogger."'}},created:function(){}},r=s,i=a("2877"),d=Object(i["a"])(r,o,t,!1,null,null,null);n["default"]=d.exports}}]);
//# sourceMappingURL=about.62182f84.js.map